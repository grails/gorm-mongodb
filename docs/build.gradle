ext {
    datastoreGithubBranch = "8.0.x"
    checkOutDir = "build/checkout"
    explicitGormSrc = System.getProperty("gorm.src") ?: (project.hasProperty('gorm.src') ? project.getProperty("gorm.src") : null)
    gormSrc = explicitGormSrc ? file(explicitGormSrc).absolutePath : "$checkOutDir/gorm-src"
    zipFile = "build/source.zip"

    coreProjects = [
            'core',
            'gorm'
    ]

}

version rootProject.version

apply plugin: 'groovy'
apply plugin: 'org.asciidoctor.jvm.convert'

configurations {
    documentation {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, (Bundling) (objects.named(Bundling, 'external')))
        }
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.groovy' && details.requested.name.startsWith('groovy')) {
            details.useVersion(groovyVersion)
        } else if (details.requested.group == 'org.springframework') {
            details.useVersion(springVersion)
        } else if (details.requested.group == "org.springframework.boot") {
            details.useVersion(springBootVersion)
        } else if (details.requested.group == 'org.springframework.boot') {
            details.useVersion(springBootVersion)
        }
    }
}

dependencies {
    documentation "org.fusesource.jansi:jansi:$jansiVersion"
    documentation "org.apache.groovy:groovy:$groovyVersion"
    documentation "org.apache.groovy:groovy-templates:$groovyVersion"
    documentation "org.apache.groovy:groovy-dateutil:$groovyVersion"
    documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"
    for(p in coreProjects) {
        documentation "org.grails:grails-datastore-$p:$datastoreVersion"
    }
    project.rootProject.subprojects.findAll { !it.name.contains('-rx-') }.each { subproject ->
        if(subproject.name != "docs" && !subproject.name.startsWith('examples')) {
            documentation project(":$subproject.name")
        }
    }
}

asciidoctor {
    resources {
        from("${project.projectDir}/src/docs/images")
        into "${project.projectDir}/images"
    }

    attributes  'experimental'  : 'true',
                'compat-mode'   : 'true',
                'toc'           : 'left',
                'icons'         : 'font',
                'reproducible'  : '',
                'version'       : project.version,
                'pluginVersion' : project.version,
                'mongoDriverVersion': mongodbDriverVersion,
                'sourcedir'     : "${project.rootDir}"

    baseDirFollowsSourceDir()
}

task fetchSource {

    outputs.dir layout.buildDirectory.dir('checkout')
    inputs.properties(branch: datastoreGithubBranch)

    onlyIf {
        println "GORM SRC=$explicitGormSrc"
        return !explicitGormSrc
    }

    doLast {
        ant.mkdir dir: project.buildDir
        ant.mkdir dir: checkOutDir

        println "Downloading GORM source code."
        if (isReleaseVersion) {
            ant.get src: "https://github.com/grails/grails-data-mapping/archive/refs/tags/v${datastoreVersion}.zip", dest: zipFile, verbose: true
        } else {
            ant.get src: "https://github.com/grails/grails-data-mapping/archive/refs/heads/${datastoreGithubBranch}.zip", dest: zipFile, verbose: true
        }
        ant.unzip src: zipFile, dest: checkOutDir, {
            mapper type: "regexp", from: "(grails-\\S*?/)(.*)", to: "gorm-src/\\2"
        }
        println "GORM source code downloaded."
    }
}

task copyDocs(type: Copy, dependsOn:asciidoctor) {
    mustRunAfter('asciidoctor', 'groovydoc', 'copyResources')
    finalizedBy "cleanAsciidoc"
    from project(":docs").layout.buildDirectory.dir("docs/asciidoc")
    into project(":docs").layout.buildDirectory.dir("docs/manual")
}

task cleanAsciidoc(type: Delete, dependsOn: copyDocs) {
    mustRunAfter "copyDocs"
    delete project(":docs").layout.buildDirectory.dir("docs/asciidoc")
}

tasks.withType(Groovydoc) {
    dependsOn(fetchSource)
    docTitle = "GORM for MongoDB - ${project.version}"
    destinationDir = project.file("build/docs/api")

    def files
    for(p in coreProjects) {
        if(files == null) {
            files = project.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
        }
        else {
            files += project.files("${checkOutDir}/gorm-src/grails-datastore-${p}/src/main/groovy")
        }
    }
    project.rootProject.subprojects
                        .findAll { !it.name.contains('-rx-') && !it.name.startsWith('examples') }
                        .each { subproject ->
        if(subproject.file('src/main/groovy').exists()) {
            files += subproject.files("src/main/groovy")
        }
    }
    source = files
    classpath = configurations.documentation
}

tasks.withType(org.gradle.api.tasks.javadoc.Groovydoc) {
    configure {
        access = GroovydocAccess.PRIVATE
        processScripts = false
        includeMainForScripts = false
        includeAuthor = true
        groovyClasspath += configurations.documentation
    }
}

task copyResources(type:Copy) {
    from 'src/docs/resources'
    into "${project.layout.buildDirectory.get()}/docs"
}

task docs(dependsOn:[asciidoctor, copyDocs, cleanAsciidoc, groovydoc, copyResources] + subprojects.findAll { project -> project.tasks.findByName('groovydoc')}
                .collect { project -> project.tasks.groovydoc })

task assembleDocsDist(type: Zip) {
    dependsOn docs, copyDocs
    from "${project.layout.buildDirectory.get()}/docs"
    include '*'
    include '*/**'
    archiveFileName = "${project.name}-${project.version}.zip"
    destinationDirectory = project.layout.buildDirectory.dir('distributions')
}

docs.finalizedBy assembleDocsDist